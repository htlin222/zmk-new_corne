#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <38 39>;
        };

        tab_combo_right {
            bindings = <&kp TAB>;
            key-positions = <37 38>;
        };

        tab_combo_left {
            bindings = <&kp TAB>;
            key-positions = <31 32>;
        };

        switch_input_method {
            bindings = <&kp LC(SPACE)>;
            key-positions = <30 31>;
        };

        term {
            bindings = <&kp LC(A)>;
            key-positions = <8 10>;
        };

        right_ctrl {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <24 25>;
        };

        left_ctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <15 16>;
        };

        ctrl_u {
            bindings = <&kp LC(U)>;
            key-positions = <23 25>;
        };

        ctrl_d {
            bindings = <&kp LC(D)>;
            key-positions = <37 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&sl 5             &kp Q             &kp W  &lt 1 E          &kp R                &kp T                                           &kp UP                &kp Y      &kp U                &lt 1 I        &kp O    &kp P                      &kp DEL
&mt LCTRL ESCAPE  &mt LEFT_SHIFT A  &kp S  &lt 2 D          &lt 3 F              &lt 4 G                               &kp LEFT  &kp ENTER  &kp RIGHT  &lt 4 H    &lt 3 J              &lt 2 K        &kp L    &mt RIGHT_SHIFT SEMICOLON  &mt RCTRL SQT
&kp LEFT_SHIFT    &mt LEFT_SHIFT Z  &kp X  &kp C            &kp V                &kp B                   &kp K_MUTE              &kp DOWN              &kp N      &kp M                &kp COMMA      &kp DOT  &mt RIGHT_SHIFT SLASH      &kp RIGHT_SHIFT
                                           &rgb_ug RGB_TOG  &mt LEFT_ALT DELETE  &mt LEFT_GUI BACKSPACE                                                &kp SPACE  &mt RIGHT_ALT ENTER  &kp RIGHT_GUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        numbers {
            display-name = "NUMBER";
            bindings = <
&bt BT_PRV  &bt BT_SEL 0          &bt BT_SEL 1          &bt BT_SEL 2          &bt BT_SEL 3          &bt BT_SEL 4                                  &mmv MOVE_UP                     &kp EQUAL  &kp N7        &kp N8        &kp N9        &kp N0         &kp BSPC
&bt BT_NXT  &kp LS(LG(NUMBER_1))  &kp LS(LG(NUMBER_2))  &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(N5))                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp PLUS   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PIPE       &kp PG_UP
&trans      &kp LS(LG(NUMBER_6))  &kp LS(LG(N7))        &kp LS(LG(N8))        &kp LS(LG(N9))        &kp LS(LG(N0))  &kp C_MUTE                    &mmv MOVE_DOWN                   &kp MINUS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH  &kp PG_DN
                                                        &trans                &trans                &trans                                                                         &kp N0     &kp UNDER     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRIGHTNESS_INC C_BRI_DEC>;
        };

        symbol {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp GRAVE  &kp TILDE  &kp TILDE  &kp DLLR    &kp PRCNT                              &mmv MOVE_UP                     &kp GREATER_THAN  &kp LBKT  &kp LBRC   &kp LPAR          &trans             &trans
&trans  &kp EXCL   &kp AT     &kp HASH   &kp DOLLAR  &kp PERCENT            &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LESS_THAN     &kp RBKT  &kp RBRC   &kp RPAR          &kp BSLH           &kp PIPE
&trans  &kp EXCL   &kp AT     &kp HASH   &kp DOLLAR  &kp PERCENT  &trans                    &mmv MOVE_DOWN                   &kp CARET         &kp AMPS  &kp ASTRK  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp BACKSLASH
                              &trans     &trans      &trans                                                                  &trans            &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp E B>;
            label = "SYMBOL";
        };

        Cool {
            display-name = "Fn";
            bindings = <
&studio_unlock  &kp F1           &kp LS(LG(NUMBER_2))  &kp LS(LG(N7))   &kp LS(LG(NUMBER_4))  &kp F5                                           &mmv MOVE_UP                     &kp F6             &kp LS(LG(NUMBER_7))  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp K_MUTE                &kp C_BRIGHTNESS_INC
&trans          &trans           &mkp LCLK             &mkp MCLK        &mkp RCLK             &mkp MB4                         &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT           &kp DOWN_ARROW        &kp UP_ARROW       &kp RIGHT         &kp PRINTSCREEN           &kp C_BRIGHTNESS_DEC
&trans          &rgb_ug RGB_HUD  &rgb_ug RGB_HUI       &rgb_ug RGB_BRD  &rgb_ug RGB_BRI       &rgb_ug RGB_EFF    &kp C_MUTE                    &mmv MOVE_DOWN                   &trans             &kp LC(LS(M))         &kp LG(COMMA)      &kp LC(LG(SEMI))  &kp LG(LC(SINGLE_QUOTE))  &kp PAUSE_BREAK
                                                       &trans           &trans                &kp LC(LA(LG(M)))                                                                 &kp LC(LG(ENTER))  &kp LC(LA(RET))       &trans
            >;

            sensor-bindings = <&scroll_encoder>;
            label = "COOL";
        };

        function {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &kp F13  &kp F7  &kp F8  &kp F9  &kp F16  &kp F19
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &kp F12  &kp F4  &kp F5  &kp F6  &kp F15  &kp F18
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &kp F11  &kp F1  &kp F2  &kp F3  &kp F14  &kp F17
                        &trans  &trans  &trans                                    &kp F10  &trans  &trans
            >;

            label = "FN_KEYS";
            sensor-bindings = <&inc_dec_kp 0 0>;
        };

        steno {
            bindings = <
&sl 0   &kp S   &kp T   &kp P     &kp H   &kp ASTRK                    &trans          &kp ASTRK  &kp F   &kp P     &kp L   &kp T   &kp D
&trans  &kp S   &kp K   &kp W     &kp R   &kp ASTRK            &trans  &trans  &trans  &kp ASTRK  &kp R   &kp B     &kp G   &kp S   &kp Z
&trans  &trans  &trans  &trans    &trans  &trans     &trans            &trans          &trans     &trans  &trans    &trans  &trans  &trans
                        &kp HASH  &kp A   &kp O                                        &kp E      &kp U   &kp HASH
            >;

            label = "steno";
        };
    };
};
