#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

&mt {
    tapping-term-ms = <500>;
    hold-trigger-on-release;
    quick-tap-ms = <200>;
    require-prior-idle-ms = <100>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <38 39>;
        };

        tab_combo_right {
            bindings = <&kp TAB>;
            key-positions = <37 38>;
        };

        tab_combo_left {
            bindings = <&kp TAB>;
            key-positions = <31 32>;
        };

        switch_input_method {
            bindings = <&kp LC(SPACE)>;
            key-positions = <30 31>;
        };

        term {
            bindings = <&kp LC(A)>;
            key-positions = <8 10>;
            layers = <0>;
        };

        right_ctrl {
            bindings = <&kp RIGHT_CONTROL>;
            key-positions = <24 25>;
            layers = <0>;
        };

        left_ctrl {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <15 16>;
            layers = <0>;
        };

        ctrl_u {
            bindings = <&kp LC(U)>;
            key-positions = <23 25>;
            layers = <0>;
        };

        ctrl_d {
            bindings = <&kp LC(D)>;
            key-positions = <37 39>;
            layers = <0>;
        };

        previous_page {
            bindings = <&kp LC(H)>;
            key-positions = <29 15>;
        };

        next_page {
            bindings = <&kp RC(L)>;
            key-positions = <25 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp Q           &kp Q             &kp W        &lt 1 E          &kp R                &kp T                                       &kp UP                &kp Y                &kp U                &lt 1 I        &kp O        &kp P                      &kp DEL
&mt LCTRL Q     &mt LEFT_SHIFT A  &mt LCTRL S  &lt 2 D          &lt 3 F              &lt 4 G                           &kp LEFT  &kp ENTER  &kp RIGHT  &lt 4 H              &lt 3 J              &lt 2 K        &mt RCTRL L  &mt RIGHT_SHIFT SEMICOLON  &mt RCTRL P
&kp LEFT_SHIFT  &mt LEFT_SHIFT Z  &kp X        &kp C            &kp V                &kp B                   &tog 5              &kp DOWN              &kp N                &kp M                &kp COMMA      &kp DOT      &mt RIGHT_SHIFT SLASH      &kp SINGLE_QUOTE
                                               &rgb_ug RGB_TOG  &mt LEFT_ALT DELETE  &mt LEFT_GUI BACKSPACE                                            &mt RIGHT_GUI SPACE  &mt RIGHT_ALT ENTER  &kp RIGHT_GUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        numbers {
            display-name = "NUMBER";
            bindings = <
&trans      &bt BT_SEL 0          &bt BT_SEL 1          &bt BT_SEL 2          &bt BT_SEL 3          &bt BT_SEL 4                                  &mmv MOVE_UP                     &kp EQUAL  &kp N7        &kp N8        &kp N9        &kp N0         &kp BSPC
&bt BT_PRV  &kp LS(LG(NUMBER_1))  &kp LS(LG(NUMBER_2))  &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(N5))                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp PLUS   &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PIPE       &kp PG_UP
&bt BT_NXT  &kp LS(LG(NUMBER_6))  &kp LS(LG(N7))        &kp LS(LG(N8))        &kp LS(LG(N9))        &kp LS(LG(N0))  &kp C_MUTE                    &mmv MOVE_DOWN                   &kp MINUS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH  &kp PG_DN
                                                        &trans                &trans                &trans                                                                         &kp N0     &kp UNDER     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DEC>;
        };

        symbol {
            display-name = "SYMBOL";
            bindings = <
&trans  &kp GRAVE  &kp TILDE  &kp TILDE  &kp DLLR    &kp PRCNT                              &mmv MOVE_UP                     &kp GREATER_THAN  &kp LBKT  &kp LBRC   &kp LPAR          &trans             &trans
&trans  &kp EXCL   &kp AT     &kp HASH   &kp DOLLAR  &kp PERCENT            &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LESS_THAN     &kp RBKT  &kp RBRC   &kp RPAR          &kp BSLH           &kp PIPE
&trans  &kp EXCL   &kp AT     &kp HASH   &kp DOLLAR  &kp PERCENT  &trans                    &mmv MOVE_DOWN                   &kp CARET         &kp AMPS  &kp ASTRK  &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp BACKSLASH
                              &trans     &trans      &trans                                                                  &trans            &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp LG(PLUS) LG(MINUS)>;
            label = "SYMBOL";
        };

        Cool {
            display-name = "Fn";
            bindings = <
&trans  &kp LS(LG(NUMBER_1))  &kp LS(LG(NUMBER_2))  &kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(NUMBER_5))                               &kp LC(LG(K))                 &kp LS(LG(NUMBER_6))  &kp LS(LG(NUMBER_7))  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP   &kp K_MUTE                &kp C_BRIGHTNESS_INC
&trans  &trans                &mkp LCLK             &mkp MCLK             &mkp RCLK             &mkp MB4                            &kp LC(LG(H))  &mkp LCLK      &kp LC(LG(L))  &kp LEFT              &kp DOWN_ARROW        &kp UP_ARROW       &kp RIGHT         &kp PRINTSCREEN           &kp C_BRIGHTNESS_DEC
&trans  &rgb_ug RGB_HUD       &rgb_ug RGB_HUI       &rgb_ug RGB_BRD       &rgb_ug RGB_BRI       &rgb_ug RGB_EFF       &kp C_MUTE                   &kp LC(LG(J))                 &trans                &kp LC(LS(M))         &kp LG(COMMA)      &kp LC(LG(SEMI))  &kp LG(LC(SINGLE_QUOTE))  &kp PAUSE_BREAK
                                                    &trans                &trans                &kp LC(LA(LG(M)))                                                                &kp LC(LG(ENTER))     &kp LC(LA(RET))       &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(L) LC(H)>;
            label = "COOL";
        };

        function {
            bindings = <
&trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                    &trans          &kp F6   &kp F7  &kp F8  &kp F9  &kp F10  &kp F19
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &kp F12  &kp F4  &kp F5  &kp F6  &kp F15  &kp F18
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &kp F11  &kp F1  &kp F2  &kp F3  &kp F14  &kp F17
                        &trans  &trans  &trans                                    &kp F10  &trans  &trans
            >;

            label = "FN_KEYS";
            sensor-bindings = <&inc_dec_kp LC(U) LC(D)>;
        };

        steno {
            bindings = <
&kp TAB           &kp Q  &kp W  &kp E      &kp R  &kp T                            &trans          &kp Y  &kp U  &kp I      &kp O  &kp P          &kp LEFT_BRACKET
&mt RCTRL ESCAPE  &kp A  &kp S  &kp D      &kp F  &kp G                    &trans  &trans  &trans  &kp H  &kp J  &kp K      &kp L  &kp SEMICOLON  &kp SINGLE_QUOTE
&kp LEFT_SHIFT    &none  &none  &none      &none  &kp BACKSPACE  &tog 5            &trans          &none  &none  &none      &none  &trans         &trans
                                &kp SPACE  &kp C  &kp V                                            &kp N  &kp M  &kp SPACE
            >;

            label = "steno";
        };
    };
};
